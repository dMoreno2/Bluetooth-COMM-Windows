import serial
import time
import string
import threading as thread
import csv

messaging = True

clientOrBeacon = ''

print("Client or Beacon Device | 0 or 1")
userInput = input()
if userInput =='1':
    clientOrBeacon = 1
    print("here")
else:
    clientOrBeacon = 0

try:
    recievedSerial = serial.Serial(port="COM4", stopbits=serial.STOPBITS_ONE)
except:
    recievedSerial = serial.Serial("/dev/rfcomm1", 9600,stopbits=serial.STOPBITS_ONE)

recievedSerial.write(str.encode('Start\r\n'))

header = ['ID', 'Connected ID', 'My MAC', 'Connected MAC', 'Date Sent', 'Date Received', 'Payload Sent', 'Payload Received']
f = open('Results.CSV','w', newline='')
writer = csv.writer(f)
writer.writerow(header)

_ID = 'Client' #this devices ID
_CID = '' #id of connected device
_MYMAC = '34:cf:f6:d0:89:db' #mac address of this device
_RECEIVEMAC = '' #mac address of connected device
_DATE = ''  #date sent
_RDATE = ''  #date received
_PAYLOAD = '' #data sent
_RPAYLOAD = ''  #data received

running = True

def OnKeyExit():
    global messaging
    global OnKeyExit
    while messaging == True:
        userInput = input()
        if userInput =='q':
            messaging = False
            print("Program Execution Ended")

def CSVOutput():
#def CSVOutput(sentMSG,receivedMSG):
    global _ID #this devices ID
    global _CID #id of connected device
    global _MYMAC #mac address of this device
    global _RECEIVEMAC #mac address of connected device
    global _DATE #date sent
    global _RDATE #date received
    global _PAYLOAD #data sent
    global _RPAYLOAD  #data received
    #f = open(path, 'w',encoding='UTF8')
    #header = ['Sent', 'Received']
    #data = [sentMSG,receivedMSG]
    #writer = csv.writer(f)

    # write the data
    writer.writerow([_ID,_CID,_MYMAC,_RECEIVEMAC,_DATE,_RDATE,_PAYLOAD,_RPAYLOAD])
    #f.close()

def SendAndReceive():
    global _ID
    global _MYMAC
    global _DATE
    global _PAYLOAD 
    global clientOrBeacon

    receivedMessage = ''
    _PAYLOAD = (time.time() * 76)% 99999
    seconds = time.time()
    _DATE = str(time.ctime(seconds))
    message =  _ID+'|'+_MYMAC+'|'+_DATE+'|'+str(_PAYLOAD) +'|'+ '\r\n'

    if(clientOrBeacon == 1):
        recievedSerial.write(str.encode(message))
        while receivedMessage =='':
            receivedMessage = recievedSerial.readline()

    elif clientOrBeacon == 0:
        while receivedMessage == '':
            receivedMessage = recievedSerial.readline()
        recievedSerial.write(str.encode(message))
    
    print(receivedMessage)
    time.sleep(5)
    #receivedMessage = recievedSerial.readline()
    #print(receivedMessage)
    ProcessReceived(receivedMessage)
    #CSVOutput(message,receivedMessage)


def ProcessReceived(Message):
    global _CID
    global _RECEIVEMAC
    global _RDATE
    global _RPAYLOAD
    if Message !='':
        decodedMessage = Message.decode('utf-8').strip('\r\n')
        message = decodedMessage.split("|")
        _CID = message[0]
        _RECEIVEMAC = message[1]
        _RDATE = message[2]
        _RPAYLOAD = message[3]
        CSVOutput()

OnKeyExit = thread.Thread(target = OnKeyExit)
OnKeyExit.start()

while messaging == True:
    SendAndReceive()

#OnKeyExit.join()
#exit()
f.close()
